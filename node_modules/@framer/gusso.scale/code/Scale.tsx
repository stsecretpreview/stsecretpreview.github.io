import * as React from 'react'
import { ControlType } from 'framer'
import { box, text, arrow, bottomLeft, topRight } from './EmptyState'

export const Scale = props => {
  const hasChildren = props.children.length

  const { mode, numeric, lockSide } = props
  const { width, height } = hasChildren ? props.children[0].props : props

  const scaleX = props.width / width
  const scaleY = props.height / height

  const axis = { horizontal: scaleX, vertical: scaleY }

  let transform

  switch (mode) {
    case 'Axis':
      transform = `scale(${lockSide == 'horizontal' ? scaleX : scaleY})`
      break

    case 'Value':
      transform = `scale(${numeric})`
      break

    case 'Free':
      transform = `scaleX(${scaleX}) scaleY(${scaleY})`
      break
  }

  return hasChildren ? (
    <div>
      {React.cloneElement(props.children[0], {
        width: props.width / (mode == 'Axis' ? axis[lockSide] : scaleX),
        height: props.height / (mode == 'Axis' ? axis[lockSide] : scaleY),
        originX: 0,
        originY: 0,
        style: { transform, willChange: 'auto' },
      })}
    </div>
  ) : (
    <div style={box}>
      <div style={text}>Connect</div>
      <div style={arrow}>â†’</div>
      <div style={bottomLeft} />
      <div style={topRight} />
    </div>
  )
}

Scale.defaultProps = {
  width: 150,
  height: 150,
}

Scale.propertyControls = {
  children: {
    type: ControlType.ComponentInstance,
    title: 'Content',
  },

  mode: {
    type: ControlType.SegmentedEnum,
    title: 'Mode',
    options: ['Free', 'Value', 'Axis'],
    defaultValue: 'Free',
  },

  numeric: {
    type: ControlType.Number,
    title: 'Scale',
    step: 0.1,
    defaultValue: 1.5,
    hidden: props => props.mode != 'Value',
  },

  lockSide: {
    type: ControlType.SegmentedEnum,
    title: 'Scale',
    options: ['horizontal', 'vertical'],
    defaultValue: 'vertical',
    hidden: props => props.mode != 'Axis',
  },
}
