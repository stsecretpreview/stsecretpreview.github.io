import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled, { css } from 'styled-components';

const turquoise = [
    { shade: 10, hex: '#05606E' },
    { shade: 9, hex: '#07818F' },
    { shade: 8, hex: '#099AA4' },
    { shade: 7, hex: '#0FB5BA' },
    { shade: 6, hex: '#1CD4D4' },
    { shade: 5, hex: '#3AE7E1' },
    { shade: 4, hex: '#62F4EB' },
    { shade: 3, hex: '#92FDF2' },
    { shade: 2, hex: '#C1FEF6' },
    { shade: 1, hex: '#E1FCF8' },
]

const grey = '#E4E7EB';
const darkGrey = '#CBD2D9';

const StyledButton = styled.button`
    border-radius: 4px;
    box-sizing: border-box;
    cursor: ${props => props.buttonState === 'disabled' ? 'default' : 'pointer' };
    font-family: 'Inter UI', 'SF Pro Text', 'Helvetica Neue', 'Helvetica', sans-serif;
    font-size: 14px;
    font-weight: 600;
    line-height: 1.2;
    text-align: center;
    
    display: flex;
    justify-content: center;
    align-items: center;
    
    ${props => {
        switch (props.variation) {
            case 'yell':
                return css`
                    background-color: ${props.color};
                    border: none;
                    color: white;
                    transition: background-color 0.2s;
                    &:hover {
                        background-color: ${props => props.color2};
                    }
                    &:active {
                        background-color: ${props => props.color3};
                    }
                `;
                break;
            case 'talk':
                return css`
                    background-color: transparent;
                    border: 1px solid ${props.color};
                    color: ${props.color2};
                `
                break;
            case 'whisper':
                return css`
                    border: none; 
                    background-color: transparent;
                    color: ${props.color};
                    padding: 0;
                `;
                break;
            default:
                return
        }
    }}

    ${props => props.buttonState === 'disabled' && css`
        background-color: ${grey};
        border: none;
        color: ${darkGrey};
        &:hover,
        &:focus,
        &:active {
            background-color: ${grey};
        }
    `}
`

// Define type of property
interface Props {
    buttonState: "normal" | "hover" | "focus" | "active" | "disabled";
    color: string;
    color2: string;
    color3: string;
    height: number;
    text: string;
    variation: "yell" | "talk" | "whisper";
    width: number;
}

export class Button extends React.Component<Props> {

    // Set default properties
    static defaultProps = {
        buttonState: 'normal',
        color: turquoise.filter(color => color.shade === 7)[0].hex,
        color2: turquoise.filter(color => color.shade === 8)[0].hex,
        color3: turquoise.filter(color => color.shade === 9)[0].hex,
        height: 40,
        text: "Button",
        variation: "yell",
        width: 112,
    }

    // Items shown in property panel
    static propertyControls: PropertyControls = {
        text: {
            type: ControlType.String,
            title: "Text"
        },
        variation: {
            title: "Variation",
            type: ControlType.Enum,
            options: ['yell', 'talk', 'whisper'],
            optionTitles: ['Yell', 'Talk', 'Whisper']
        },
        buttonState: { 
            title: "State",
            type: ControlType.Enum,
            options: ['normal', 'hover', 'focus', 'active', 'disabled'],
            optionTitles: ['Normal', 'Hover', 'Focus', 'Active', 'Disabled']
        },
        color: {
            title: "Color",
            type: ControlType.Color
        },
        color2: {
            title: "Color 2",
            type: ControlType.Color
        },
        color3: {
            title: "Color 3",
            type: ControlType.Color
        }
    }

    render() {
        const { buttonState, color, color2, color3, height, text, variation, width } = this.props;

        if (buttonState === 'disabled') {
            return (
                <StyledButton
                    color={color}
                    color2={color2}
                    color3={color3}
                    buttonState={buttonState}
                    style={{ width: width, height: height }}
                    variation={variation}
                    disabled
                >
                    {text}
                </StyledButton>
            )
        }

        return (
            <StyledButton
                color={color}
                color2={color2}
                color3={color3}
                buttonState={buttonState}
                style={{ width: width, height: height }}
                variation={variation}
            >
                {text}
            </StyledButton>
        )
    }
}
