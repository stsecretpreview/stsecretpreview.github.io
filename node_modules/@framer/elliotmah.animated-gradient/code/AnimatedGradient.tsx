import * as React from "react";
import { PropertyControls, ControlType } from "framer";
import styled, { keyframes } from "styled-components";

// Define type of property
interface Props {
  isPlaying: string;
  color1: number;
  color2: number;
  color3: number;
  color4: number;
  color5: number;
}

const slide = keyframes`
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    } 
`;

const Gradient = styled<Props, any>("div")`
  height: 100%;
  width: 100%;
  animation: ${slide} 3s infinite;
  animation-play-state: ${props => props.isPlaying};
  animation-fill-mode: both;
  background: linear-gradient(
    to right,
    ${props => props.color1},
    ${props => props.color2},
    ${props => props.color3},
    ${props => props.color4},
    ${props => props.color5}
  );
`;

export class gradient extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    isPlaying: "running",
    color1: "rgba(255, 255, 255, 0)",
    color2: "rgba(255, 255, 255, 0.3)",
    color3: "rgba(255, 255, 255, 0.5)",
    color4: "rgba(255, 255, 255, 0.3)",
    color5: "rgba(255, 255, 255, 0)"
  };

  // Items shown in property pane
  static propertyControls: PropertyControls = {
    isPlaying: {
      type: ControlType.SegmentedEnum,
      title: "Animation",
      options: ["running", "paused"],
      optionTitles: ["On", "Off"]
    },
    color1: { type: ControlType.Color, title: "Color 1" },
    color2: { type: ControlType.Color, title: "Color 2" },
    color3: { type: ControlType.Color, title: "Color 3" },
    color4: { type: ControlType.Color, title: "Color 4" },
    color5: { type: ControlType.Color, title: "Color 5" }
  };

  render() {
    const { isPlaying, color1, color2, color3, color4, color5 } = this.props;
    return (
      <Gradient
        isPlaying={isPlaying}
        color1={color1}
        color2={color2}
        color3={color3}
        color4={color4}
        color5={color5}
      />
    );
  }
}
